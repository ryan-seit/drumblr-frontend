{"ast":null,"code":"var _jsxFileName = \"/Users/ryan/Documents/GitHub/drumblr_frontend/src/App.js\";\nimport React from 'react';\nimport MIDISounds from 'midi-sounds-react';\nimport SampleContainer from './SampleContainer';\nimport HeaderContainer from './HeaderContainer';\nimport NavBar from './NavBar';\nimport './css/App.css';\nconst URL = 'http://localhost:3000';\nexport default class App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      bpm: 120,\n      name: 'test',\n      Sample1: 3,\n      Sample2: 22,\n      Sample3: 26,\n      Sample4: 35,\n      tracks: [[true, false, false, false, false, false, false, true, true, false, true, false, false, false, true, false], [false, false, false, false, true, false, false, false, false, false, false, false, true, false, false, false], [false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false], [true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false]],\n      data: [],\n      beats: []\n    };\n\n    this.playSequence = () => {\n      // gets array of notes with value of true\n      let notesToPlay = [];\n      let drums = [...this.state.drumObjs];\n\n      for (let i = 0; i < drums.length; i++) drums[i].isPlaying.filter((note, index) => {\n        if (note) {\n          let drum = drums[i].midiID;\n          let noteObj = {\n            sample: drum,\n            beatIndex: index\n          };\n          notesToPlay.push(noteObj);\n          return notesToPlay;\n        }\n      });\n\n      let bpm = this.state.bpm;\n      let beat = 4 * 60 / bpm;\n      let duration = beat / 16;\n      let time = null;\n\n      if (this.midiSounds === null) {\n        time = 0;\n      } else {\n        time = this.midiSounds.contextTime();\n      }\n\n      console.log(this.midiSounds);\n      notesToPlay.map(note => {\n        let noteTime = time + (duration + duration * note.beatIndex);\n        this.midiSounds.playDrumsAt(noteTime, [note.sample]);\n      });\n    };\n\n    this.togglePlaying = (sampleIndex, beatIndex) => {\n      let updatedDrumObjs = [...this.state.drumObjs];\n      let updatedIsPlaying = updatedDrumObjs[sampleIndex].isPlaying;\n      updatedIsPlaying[beatIndex] = !updatedIsPlaying[beatIndex];\n      updatedDrumObjs[sampleIndex].isPlaying = [...this.state.drumObjs[sampleIndex].isPlaying];\n      this.setState({\n        drumObjs: updatedDrumObjs\n      });\n    };\n\n    this.renderMIDISounds = () => {\n      return /*#__PURE__*/React.createElement(MIDISounds, {\n        ref: ref => this.midiSounds = ref,\n        appElementName: \"root\",\n        instruments: [3, 458],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 7\n        }\n      });\n    };\n\n    this.fillBeat = () => {\n      for (let i = 0; i < 16; i++) {\n        let drums = [];\n        let newBeats = [...this.state.beats];\n\n        if (this.state.tracks[0][i]) {\n          drums.push(this.state.Sample2);\n        }\n\n        if (this.state.tracks[1][i]) {\n          drums.push(this.state.Sample1);\n        }\n\n        if (this.state.tracks[2][i]) {\n          drums.push(this.state.Sample4);\n        }\n\n        if (this.state.tracks[3][i]) {\n          drums.push(this.state.Sample3);\n        }\n\n        let beat = [drums, []];\n        newBeats[i] = beat;\n        console.log(\"newBeats value\", newBeats[i]);\n        console.log(\"the beat value\", beat);\n        this.setState({\n          beats: newBeats\n        });\n      }\n    };\n\n    this.playLoop = () => {\n      this.fillBeat();\n      this.midiSounds.startPlayLoop(this.beats, 120, 1 / 16);\n    };\n\n    this.stopLoop = () => {\n      this.midiSounds.stopPlayLoop();\n    };\n\n    this.toggleDrum = (track, step) => {\n      let a = this.state.tracks;\n      a[track][step] = !a[track][step];\n      this.setState({\n        tracks: a\n      });\n      this.fillBeat();\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      initialized: true\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.fillBeat,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 7\n      }\n    }, \"fillBeat\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"drumblr\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(SampleContainer, {\n      app: this.state,\n      toggleDrum: this.toggleDrum,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"FooterContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }\n    })), this.renderMIDISounds());\n  }\n\n}","map":{"version":3,"sources":["/Users/ryan/Documents/GitHub/drumblr_frontend/src/App.js"],"names":["React","MIDISounds","SampleContainer","HeaderContainer","NavBar","URL","App","Component","state","bpm","name","Sample1","Sample2","Sample3","Sample4","tracks","data","beats","playSequence","notesToPlay","drums","drumObjs","i","length","isPlaying","filter","note","index","drum","midiID","noteObj","sample","beatIndex","push","beat","duration","time","midiSounds","contextTime","console","log","map","noteTime","playDrumsAt","togglePlaying","sampleIndex","updatedDrumObjs","updatedIsPlaying","setState","renderMIDISounds","ref","fillBeat","newBeats","playLoop","startPlayLoop","stopLoop","stopPlayLoop","toggleDrum","track","step","a","componentDidMount","initialized","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAO,eAAP;AACA,MAAMC,GAAG,GAAG,uBAAZ;AAEA,eAAe,MAAMC,GAAN,SAAkBN,KAAK,CAACO,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAE/CC,KAF+C,GAEvC;AACNC,MAAAA,GAAG,EAAE,GADC;AAENC,MAAAA,IAAI,EAAE,MAFA;AAGNC,MAAAA,OAAO,EAAE,CAHH;AAINC,MAAAA,OAAO,EAAE,EAJH;AAKNC,MAAAA,OAAO,EAAE,EALH;AAMNC,MAAAA,OAAO,EAAE,EANH;AAONC,MAAAA,MAAM,EAAC,CACL,CAAC,IAAD,EAAM,KAAN,EAAY,KAAZ,EAAkB,KAAlB,EAAwB,KAAxB,EAA8B,KAA9B,EAAoC,KAApC,EAA0C,IAA1C,EAA+C,IAA/C,EAAoD,KAApD,EAA0D,IAA1D,EAA+D,KAA/D,EAAqE,KAArE,EAA2E,KAA3E,EAAiF,IAAjF,EAAsF,KAAtF,CADK,EAEL,CAAC,KAAD,EAAO,KAAP,EAAa,KAAb,EAAmB,KAAnB,EAAyB,IAAzB,EAA8B,KAA9B,EAAoC,KAApC,EAA0C,KAA1C,EAAgD,KAAhD,EAAsD,KAAtD,EAA4D,KAA5D,EAAkE,KAAlE,EAAwE,IAAxE,EAA6E,KAA7E,EAAmF,KAAnF,EAAyF,KAAzF,CAFK,EAGL,CAAC,KAAD,EAAO,KAAP,EAAa,KAAb,EAAmB,IAAnB,EAAwB,KAAxB,EAA8B,KAA9B,EAAoC,KAApC,EAA0C,KAA1C,EAAgD,KAAhD,EAAsD,KAAtD,EAA4D,KAA5D,EAAkE,KAAlE,EAAwE,KAAxE,EAA8E,KAA9E,EAAoF,KAApF,EAA0F,KAA1F,CAHK,EAIL,CAAC,IAAD,EAAM,KAAN,EAAY,IAAZ,EAAiB,KAAjB,EAAuB,IAAvB,EAA4B,KAA5B,EAAkC,IAAlC,EAAuC,KAAvC,EAA6C,IAA7C,EAAkD,KAAlD,EAAwD,IAAxD,EAA6D,KAA7D,EAAmE,IAAnE,EAAwE,KAAxE,EAA8E,IAA9E,EAAmF,KAAnF,CAJK,CAPD;AAaNC,MAAAA,IAAI,EAAE,EAbA;AAcNC,MAAAA,KAAK,EAAE;AAdD,KAFuC;;AAAA,SAuB/CC,YAvB+C,GAuBhC,MAAM;AACnB;AACA,UAAIC,WAAW,GAAG,EAAlB;AACA,UAAIC,KAAK,GAAG,CAAC,GAAG,KAAKZ,KAAL,CAAWa,QAAf,CAAZ;;AACA,WAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACF,KAAK,CAACG,MAAtB,EAA8BD,CAAC,EAA/B,EACEF,KAAK,CAACE,CAAD,CAAL,CAASE,SAAT,CAAmBC,MAAnB,CAA0B,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACzC,YAAID,IAAJ,EAAS;AACP,cAAIE,IAAI,GAAGR,KAAK,CAACE,CAAD,CAAL,CAASO,MAApB;AACA,cAAIC,OAAO,GAAG;AAACC,YAAAA,MAAM,EAAEH,IAAT;AAAeI,YAAAA,SAAS,EAAEL;AAA1B,WAAd;AACAR,UAAAA,WAAW,CAACc,IAAZ,CAAiBH,OAAjB;AACA,iBAAOX,WAAP;AACD;AACF,OAPD;;AASF,UAAIV,GAAG,GAAG,KAAKD,KAAL,CAAWC,GAArB;AACA,UAAIyB,IAAI,GAAG,IAAI,EAAJ,GAASzB,GAApB;AACA,UAAI0B,QAAQ,GAAGD,IAAI,GAAC,EAApB;AACA,UAAIE,IAAI,GAAG,IAAX;;AACA,UAAI,KAAKC,UAAL,KAAoB,IAAxB,EAA6B;AAC3BD,QAAAA,IAAI,GAAG,CAAP;AACD,OAFD,MAEM;AACJA,QAAAA,IAAI,GAAG,KAAKC,UAAL,CAAgBC,WAAhB,EAAP;AACD;;AACDC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKH,UAAjB;AACAlB,MAAAA,WAAW,CAACsB,GAAZ,CAAgBf,IAAI,IAAI;AACtB,YAAIgB,QAAQ,GAAGN,IAAI,IAAID,QAAQ,GAAIA,QAAQ,GAAGT,IAAI,CAACM,SAAhC,CAAnB;AACA,aAAKK,UAAL,CAAgBM,WAAhB,CAA4BD,QAA5B,EAAsC,CAAChB,IAAI,CAACK,MAAN,CAAtC;AAED,OAJD;AAKD,KApD8C;;AAAA,SAsD/Ca,aAtD+C,GAsD/B,CAACC,WAAD,EAAcb,SAAd,KAA4B;AAC1C,UAAIc,eAAe,GAAG,CAAC,GAAG,KAAKtC,KAAL,CAAWa,QAAf,CAAtB;AACA,UAAI0B,gBAAgB,GAAGD,eAAe,CAACD,WAAD,CAAf,CAA6BrB,SAApD;AACAuB,MAAAA,gBAAgB,CAACf,SAAD,CAAhB,GAA8B,CAACe,gBAAgB,CAACf,SAAD,CAA/C;AACAc,MAAAA,eAAe,CAACD,WAAD,CAAf,CAA6BrB,SAA7B,GAAyC,CAAC,GAAG,KAAKhB,KAAL,CAAWa,QAAX,CAAoBwB,WAApB,EAAiCrB,SAArC,CAAzC;AACA,WAAKwB,QAAL,CAAc;AACZ3B,QAAAA,QAAQ,EAAEyB;AADE,OAAd;AAGD,KA9D8C;;AAAA,SA8E/CG,gBA9E+C,GA8E5B,MAAM;AACvB,0BACE,oBAAC,UAAD;AACA,QAAA,GAAG,EAAGC,GAAD,IAAU,KAAKb,UAAL,GAAkBa,GADjC;AAEA,QAAA,cAAc,EAAC,MAFf;AAGA,QAAA,WAAW,EAAE,CAAC,CAAD,EAAI,GAAJ,CAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAOD,KAtF8C;;AAAA,SAwF/CC,QAxF+C,GAwFpC,MAAM;AACjB,WAAI,IAAI7B,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAC,EAAd,EAAiBA,CAAC,EAAlB,EAAqB;AACjB,YAAIF,KAAK,GAAC,EAAV;AACA,YAAIgC,QAAQ,GAAG,CAAC,GAAG,KAAK5C,KAAL,CAAWS,KAAf,CAAf;;AAEH,YAAG,KAAKT,KAAL,CAAWO,MAAX,CAAkB,CAAlB,EAAqBO,CAArB,CAAH,EAA2B;AAACF,UAAAA,KAAK,CAACa,IAAN,CAAW,KAAKzB,KAAL,CAAWI,OAAtB;AAAgC;;AAC5D,YAAG,KAAKJ,KAAL,CAAWO,MAAX,CAAkB,CAAlB,EAAqBO,CAArB,CAAH,EAA2B;AAACF,UAAAA,KAAK,CAACa,IAAN,CAAW,KAAKzB,KAAL,CAAWG,OAAtB;AAAgC;;AAC5D,YAAG,KAAKH,KAAL,CAAWO,MAAX,CAAkB,CAAlB,EAAqBO,CAArB,CAAH,EAA2B;AAACF,UAAAA,KAAK,CAACa,IAAN,CAAW,KAAKzB,KAAL,CAAWM,OAAtB;AAAgC;;AAC5D,YAAG,KAAKN,KAAL,CAAWO,MAAX,CAAkB,CAAlB,EAAqBO,CAArB,CAAH,EAA2B;AAACF,UAAAA,KAAK,CAACa,IAAN,CAAW,KAAKzB,KAAL,CAAWK,OAAtB;AAAgC;;AACzD,YAAIqB,IAAI,GAAC,CAACd,KAAD,EAAO,EAAP,CAAT;AACAgC,QAAAA,QAAQ,CAAC9B,CAAD,CAAR,GAAcY,IAAd;AACAK,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BY,QAAQ,CAAC9B,CAAD,CAAtC;AACAiB,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BN,IAA9B;AACH,aAAKc,QAAL,CAAc;AACT/B,UAAAA,KAAK,EAAEmC;AADE,SAAd;AAGE;AACH,KAzG+C;;AAAA,SA0GhDC,QA1GgD,GA0GrC,MAAM;AAChB,WAAKF,QAAL;AACA,WAAKd,UAAL,CAAgBiB,aAAhB,CAA8B,KAAKrC,KAAnC,EAA0C,GAA1C,EAA+C,IAAE,EAAjD;AACA,KA7G+C;;AAAA,SA8GhDsC,QA9GgD,GA8GrC,MAAM;AAChB,WAAKlB,UAAL,CAAgBmB,YAAhB;AACC,KAhH8C;;AAAA,SAkHhDC,UAlHgD,GAkHnC,CAACC,KAAD,EAAOC,IAAP,KAAgB;AAC5B,UAAIC,CAAC,GAAC,KAAKpD,KAAL,CAAWO,MAAjB;AACA6C,MAAAA,CAAC,CAACF,KAAD,CAAD,CAASC,IAAT,IAAiB,CAACC,CAAC,CAACF,KAAD,CAAD,CAASC,IAAT,CAAlB;AACA,WAAKX,QAAL,CAAc;AAACjC,QAAAA,MAAM,EAAC6C;AAAR,OAAd;AACA,WAAKT,QAAL;AACA,KAvH+C;AAAA;;AAmBhDU,EAAAA,iBAAiB,GAAG;AACnB,SAAKb,QAAL,CAAc;AAAEc,MAAAA,WAAW,EAAE;AAAf,KAAd;AACC;;AAoGDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAQ,MAAA,OAAO,EAAE,KAAKZ,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,eAEE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAGE,oBAAC,eAAD;AAAiB,MAAA,GAAG,EAAE,KAAK3C,KAA3B;AAAkC,MAAA,UAAU,EAAE,KAAKiD,UAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,eAIE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CAFF,EAQG,KAAKR,gBAAL,EARH,CADF;AAYH;;AAtIgD","sourcesContent":["import React from 'react';\nimport MIDISounds from 'midi-sounds-react';\nimport SampleContainer from './SampleContainer';\nimport HeaderContainer from './HeaderContainer';\nimport NavBar from './NavBar';\nimport './css/App.css';\nconst URL = 'http://localhost:3000';\n\nexport default class App extends React.Component {\n\n  state = {\n    bpm: 120,\n    name: 'test',\n    Sample1: 3,\n    Sample2: 22,\n    Sample3: 26,\n    Sample4: 35,\n    tracks:[\n      [true,false,false,false,false,false,false,true,true,false,true,false,false,false,true,false],\n      [false,false,false,false,true,false,false,false,false,false,false,false,true,false,false,false],\n      [false,false,false,true,false,false,false,false,false,false,false,false,false,false,false,false],\n      [true,false,true,false,true,false,true,false,true,false,true,false,true,false,true,false]\n    ],\n    data: [],\n    beats: []\n  }\n\n\tcomponentDidMount() {\n\t\tthis.setState({ initialized: true });\n  }\n  \n  playSequence = () => {\n    // gets array of notes with value of true\n    let notesToPlay = []\n    let drums = [...this.state.drumObjs]\n    for (let i=0; i<drums.length; i++)\n      drums[i].isPlaying.filter((note, index )=> {\n        if (note){\n          let drum = drums[i].midiID\n          let noteObj = {sample: drum, beatIndex: index}          \n          notesToPlay.push(noteObj)\n          return notesToPlay\n        }\n      })\n    \n    let bpm = this.state.bpm \n    let beat = 4 * 60 / bpm\n    let duration = beat/16\n    let time = null\n    if (this.midiSounds === null){\n      time = 0\n    } else{\n      time = this.midiSounds.contextTime()\n    }\n    console.log(this.midiSounds)\n    notesToPlay.map(note => {\n      let noteTime = time + (duration + (duration * note.beatIndex))\n      this.midiSounds.playDrumsAt(noteTime, [note.sample])\n      \n    })\n  }\n\n  togglePlaying = (sampleIndex, beatIndex) => {\n    let updatedDrumObjs = [...this.state.drumObjs]\n    let updatedIsPlaying = updatedDrumObjs[sampleIndex].isPlaying\n    updatedIsPlaying[beatIndex] = !updatedIsPlaying[beatIndex]\n    updatedDrumObjs[sampleIndex].isPlaying = [...this.state.drumObjs[sampleIndex].isPlaying]\n    this.setState({\n      drumObjs: updatedDrumObjs\n    })\n  }\n\n  // persist current sequence to database\n  // handleSave = () => {\n  //   fetch(URL + '/beats', {\n  //     method: \"POST\",\n  //     headers: {\"Content-Type\": \"application/json\"},\n  //     body: JSON.stringify(this.state)\n  //   })\n  //   .then(response => response.json())\n  //   .then(response => {\n  //     console.log(\"Saved to db\", response);\n  //   })\n  // }\n\n  // render MIDISounds logo in order for samples to play when sequence is triggered\n  renderMIDISounds = () => {\n    return (\n      <MIDISounds \n      ref={(ref) => (this.midiSounds = ref)}\n      appElementName=\"root\" \n      instruments={[3, 458]}\n      />\n    )\n  }\n  \n  fillBeat = () => {\n\t\tfor(let i=0;i<16;i++){\n      let drums=[];\n      let newBeats = [...this.state.beats]\n    \n\t\t\tif(this.state.tracks[0][i]){drums.push(this.state.Sample2);}\n\t\t\tif(this.state.tracks[1][i]){drums.push(this.state.Sample1);}\n\t\t\tif(this.state.tracks[2][i]){drums.push(this.state.Sample4);}\n\t\t\tif(this.state.tracks[3][i]){drums.push(this.state.Sample3);}\n      let beat=[drums,[]];\n      newBeats[i] = beat\n      console.log(\"newBeats value\", newBeats[i])\n      console.log(\"the beat value\", beat)\n\t\t\tthis.setState({\n        beats: newBeats\n      })\n    }\n\t}\n\tplayLoop = () => {\n\t\tthis.fillBeat();\n\t\tthis.midiSounds.startPlayLoop(this.beats, 120, 1/16);\n\t}\n\tstopLoop = () => {\n\t\tthis.midiSounds.stopPlayLoop();\n  }\n  \n\ttoggleDrum = (track,step) => {\n\t\tlet a=this.state.tracks;\n\t\ta[track][step] = !a[track][step];\n\t\tthis.setState({tracks:a});\n\t\tthis.fillBeat();\n\t}\n\n  render() {\n    return (\n      <div className=\"App\">\n      <button onClick={this.fillBeat}>fillBeat</button>\n        <div className=\"drumblr\">\n          {/* <HeaderContainer />\n          <NavBar playSequence={this.playSequence} handleSave={this.handleSave} bpm={this.state.bpm} /> */}\n          <SampleContainer app={this.state} toggleDrum={this.toggleDrum}/>\n          <div className=\"FooterContainer\"></div>\n        </div>\n        {this.renderMIDISounds()}\n      </div>\n  );\n}\n}\n"]},"metadata":{},"sourceType":"module"}