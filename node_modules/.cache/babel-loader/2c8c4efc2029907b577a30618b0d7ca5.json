{"ast":null,"code":"var _jsxFileName = \"/Users/ryan/Documents/GitHub/drumblr_frontend/src/App.js\";\nimport React from 'react';\nimport MIDISounds from 'midi-sounds-react';\nimport SampleContainer from './SampleContainer';\nimport HeaderContainer from './HeaderContainer';\nimport NavBar from './NavBar';\nimport './css/App.css';\nexport default class App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // just chose a default bpm to set state with\n      bpm: 120,\n      // I just hardcoded in some basic drums to start\n      drumObjs: [{\n        id: 3,\n        name: 'Bass Drum',\n        isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n      }, {\n        id: 22,\n        name: 'Hand Clap',\n        isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n      }, {\n        id: 26,\n        name: 'Snare',\n        isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n      }, {\n        id: 35,\n        name: 'Closed Hi-hat',\n        isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n      }]\n    };\n\n    this.sequenceThisNote = (sample, sampleIndex, beatIndex) => {\n      let bpm = this.state.bpm;\n      let beat = 4 * 60 / bpm;\n      let duration = beat / 16;\n      let time = this.midiSounds.contextTime();\n      let noteTime = time + (duration + duration * beatIndex); // let sample2Send = {sample, noteTime}\n      // let beingPlayed = []\n      // beingPlayed.push(sample2Send)\n      // console.log(beingPlayed)\n      // return beingPlayed\n      // beingPlayed.map(sample => this.midiSounds.playDrumsAt(sample.noteTime, [sample.sample]))\n\n      this.midiSounds.playDrumsAt(noteTime, [sample]); // console.log(time, noteTime)\n      // console.log(sampleIndex, this.props.app.drumObjs[sampleIndex])\n    };\n\n    this.togglePlaying = (sampleIndex, beatIndex) => {\n      let drumObjsCopy = [...this.state.drumObjs];\n      let isPlayingCopy = [...drumObjsCopy[sampleIndex].isPlaying];\n      console.log(isPlayingCopy[beatIndex]);\n    };\n\n    this.renderMIDISounds = () => {\n      return /*#__PURE__*/React.createElement(MIDISounds, {\n        ref: ref => this.midiSounds = ref,\n        appElementName: \"root\",\n        instruments: [3, 458],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 7\n        }\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"drumblr\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(HeaderContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(NavBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(SampleContainer, {\n      app: this.state,\n      togglePlaying: this.togglePlaying,\n      sequenceThisNote: this.sequenceThisNote,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"FooterContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }\n    })), this.renderMIDISounds());\n  }\n\n}","map":{"version":3,"sources":["/Users/ryan/Documents/GitHub/drumblr_frontend/src/App.js"],"names":["React","MIDISounds","SampleContainer","HeaderContainer","NavBar","App","Component","state","bpm","drumObjs","id","name","isPlaying","sequenceThisNote","sample","sampleIndex","beatIndex","beat","duration","time","midiSounds","contextTime","noteTime","playDrumsAt","togglePlaying","drumObjsCopy","isPlayingCopy","console","log","renderMIDISounds","ref","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAO,eAAP;AAEA,eAAe,MAAMC,GAAN,SAAkBL,KAAK,CAACM,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAE/CC,KAF+C,GAEvC;AACN;AACAC,MAAAA,GAAG,EAAE,GAFC;AAGN;AACAC,MAAAA,QAAQ,EAAE,CAAC;AACPC,QAAAA,EAAE,EAAE,CADG;AAEPC,QAAAA,IAAI,EAAE,WAFC;AAGPC,QAAAA,SAAS,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,EAAkD,KAAlD,EAAyD,KAAzD,EAAgE,KAAhE,EAAuE,KAAvE,EAA8E,KAA9E,EAAqF,KAArF,EAA4F,KAA5F,EAAmG,KAAnG,EAA0G,KAA1G;AAHJ,OAAD,EAIL;AACDF,QAAAA,EAAE,EAAE,EADH;AAEDC,QAAAA,IAAI,EAAE,WAFL;AAGDC,QAAAA,SAAS,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,EAAkD,KAAlD,EAAyD,KAAzD,EAAgE,KAAhE,EAAuE,KAAvE,EAA8E,KAA9E,EAAqF,KAArF,EAA4F,KAA5F,EAAmG,KAAnG,EAA0G,KAA1G;AAHV,OAJK,EAQL;AACDF,QAAAA,EAAE,EAAE,EADH;AAEDC,QAAAA,IAAI,EAAE,OAFL;AAGDC,QAAAA,SAAS,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,EAAkD,KAAlD,EAAyD,KAAzD,EAAgE,KAAhE,EAAuE,KAAvE,EAA8E,KAA9E,EAAqF,KAArF,EAA4F,KAA5F,EAAmG,KAAnG,EAA0G,KAA1G;AAHV,OARK,EAYN;AACFF,QAAAA,EAAE,EAAE,EADF;AAEFC,QAAAA,IAAI,EAAE,eAFJ;AAGFC,QAAAA,SAAS,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,EAAkD,KAAlD,EAAyD,KAAzD,EAAgE,KAAhE,EAAuE,KAAvE,EAA8E,KAA9E,EAAqF,KAArF,EAA4F,KAA5F,EAAmG,KAAnG,EAA0G,KAA1G;AAHT,OAZM;AAJJ,KAFuC;;AAAA,SAyB/CC,gBAzB+C,GAyB5B,CAACC,MAAD,EAASC,WAAT,EAAsBC,SAAtB,KAAoC;AACrD,UAAIR,GAAG,GAAG,KAAKD,KAAL,CAAWC,GAArB;AACA,UAAIS,IAAI,GAAG,IAAI,EAAJ,GAAST,GAApB;AACA,UAAIU,QAAQ,GAAGD,IAAI,GAAC,EAApB;AACA,UAAIE,IAAI,GAAG,KAAKC,UAAL,CAAgBC,WAAhB,EAAX;AACA,UAAIC,QAAQ,GAAGH,IAAI,IAAID,QAAQ,GAAIA,QAAQ,GAAGF,SAA3B,CAAnB,CALqD,CAMjD;AACA;AACA;AACA;AACA;AACA;;AACJ,WAAKI,UAAL,CAAgBG,WAAhB,CAA4BD,QAA5B,EAAsC,CAACR,MAAD,CAAtC,EAZqD,CAarD;AACA;AACH,KAxCgD;;AAAA,SA0C/CU,aA1C+C,GA0C/B,CAACT,WAAD,EAAcC,SAAd,KAA4B;AAC1C,UAAIS,YAAY,GAAG,CAAC,GAAG,KAAKlB,KAAL,CAAWE,QAAf,CAAnB;AACA,UAAIiB,aAAa,GAAG,CAAC,GAAGD,YAAY,CAACV,WAAD,CAAZ,CAA0BH,SAA9B,CAApB;AACAe,MAAAA,OAAO,CAACC,GAAR,CAAYF,aAAa,CAACV,SAAD,CAAzB;AACD,KA9C8C;;AAAA,SAiD/Ca,gBAjD+C,GAiD5B,MAAM;AACvB,0BACE,oBAAC,UAAD;AACA,QAAA,GAAG,EAAGC,GAAD,IAAU,KAAKV,UAAL,GAAkBU,GADjC;AAEA,QAAA,cAAc,EAAC,MAFf;AAGA,QAAA,WAAW,EAAE,CAAC,CAAD,EAAI,GAAJ,CAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAOD,KAzD8C;AAAA;;AA2D/CC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE,oBAAC,eAAD;AAAiB,MAAA,GAAG,EAAE,KAAKxB,KAA3B;AAAkC,MAAA,aAAa,EAAE,KAAKiB,aAAtD;AAAqE,MAAA,gBAAgB,EAAE,KAAKX,gBAA5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,eAIE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CADF,EAOG,KAAKgB,gBAAL,EAPH,CADF;AAWH;;AAvEgD","sourcesContent":["import React from 'react';\nimport MIDISounds from 'midi-sounds-react';\nimport SampleContainer from './SampleContainer';\nimport HeaderContainer from './HeaderContainer';\nimport NavBar from './NavBar';\nimport './css/App.css';\n\nexport default class App extends React.Component {\n\n  state = {\n    // just chose a default bpm to set state with\n    bpm: 120,\n    // I just hardcoded in some basic drums to start\n    drumObjs: [{\n        id: 3, \n        name: 'Bass Drum', \n        isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n      }, {\n        id: 22, \n        name: 'Hand Clap', \n        isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n      }, {\n        id: 26, \n        name: 'Snare', \n        isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n      },{\n      id: 35, \n      name: 'Closed Hi-hat', \n      isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n    }]\n  }\n\n  sequenceThisNote = (sample, sampleIndex, beatIndex) => {\n    let bpm = this.state.bpm \n    let beat = 4 * 60 / bpm\n    let duration = beat/16\n    let time = this.midiSounds.contextTime()\n    let noteTime = time + (duration + (duration * beatIndex))\n        // let sample2Send = {sample, noteTime}\n        // let beingPlayed = []\n        // beingPlayed.push(sample2Send)\n        // console.log(beingPlayed)\n        // return beingPlayed\n        // beingPlayed.map(sample => this.midiSounds.playDrumsAt(sample.noteTime, [sample.sample]))\n    this.midiSounds.playDrumsAt(noteTime, [sample])\n    // console.log(time, noteTime)\n    // console.log(sampleIndex, this.props.app.drumObjs[sampleIndex])\n}\n\n  togglePlaying = (sampleIndex, beatIndex) => {\n    let drumObjsCopy = [...this.state.drumObjs]\n    let isPlayingCopy = [...drumObjsCopy[sampleIndex].isPlaying]\n    console.log(isPlayingCopy[beatIndex])\n  }\n\n  // render MIDISounds logo in order for samples to play when sequence is triggered\n  renderMIDISounds = () => {\n    return (\n      <MIDISounds \n      ref={(ref) => (this.midiSounds = ref)}\n      appElementName=\"root\" \n      instruments={[3, 458]}\n      />\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"drumblr\">\n          <HeaderContainer />\n          <NavBar />\n          <SampleContainer app={this.state} togglePlaying={this.togglePlaying} sequenceThisNote={this.sequenceThisNote}/>\n          <div className=\"FooterContainer\"></div>\n        </div>\n        {this.renderMIDISounds()}\n      </div>\n  );\n}\n}\n"]},"metadata":{},"sourceType":"module"}