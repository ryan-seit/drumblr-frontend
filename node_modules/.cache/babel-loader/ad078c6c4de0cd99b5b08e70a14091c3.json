{"ast":null,"code":"var _jsxFileName = \"/Users/ryan/Documents/GitHub/drumblr_frontend/src/SampleContainer.js\";\nimport React from 'react';\nimport MIDISounds from 'midi-sounds-react';\nimport Button from '../src/Button';\n\nclass SampleContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // just chose a default bpm to set state with\n      bpm: 120,\n      // I just hardcoded in some basic drums to start\n      drumObjs: [{\n        id: 3,\n        name: 'Bass Drum',\n        isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n      }, {\n        id: 17,\n        name: 'Snare Drum',\n        isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n      }, {\n        id: 22,\n        name: 'Hand Clap',\n        isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n      }, {\n        id: 26,\n        name: 'Snare 2',\n        isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n      }, {\n        id: 32,\n        name: 'Low Tom 2',\n        isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n      }, {\n        id: 35,\n        name: 'Closed Hi-hat',\n        isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n      }, {\n        id: 40,\n        name: 'Low Tom 1',\n        isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n      }, {\n        id: 45,\n        name: 'Pedal Hi-hat',\n        isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n      }, {\n        id: 52,\n        name: 'Mid Tom 2',\n        isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n      }, {\n        id: 56,\n        name: 'Open Hi-hat',\n        isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n      }, {\n        id: 61,\n        name: 'Mid Tom 1',\n        isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n      }, {\n        id: 70,\n        name: 'Crash Cymbal',\n        isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n      }, {\n        id: 95,\n        name: 'Tambourine',\n        isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n      }, {\n        id: 105,\n        name: 'Cowbell',\n        isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n      }],\n      instrumentObj: [{\n        id: 458,\n        melody: true,\n        name: \"Violin\",\n        isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n      }]\n    };\n\n    this.sequenceThisNote = (isMelodic, sample, sampleIndex, beatIndex) => {\n      let bpm = this.state.bpm;\n      let beat = 4 * 60 / bpm;\n      let duration = beat / 16;\n      let time = this.midiSounds.contextTime();\n      let noteTime = time + (duration + duration * beatIndex);\n\n      if (isMelodic) {\n        this.midiSounds.playChordAt(noteTime, sample, [60], 0.5);\n        console.log(time, noteTime);\n      } else if (!isMelodic) {\n        this.midiSounds.playDrumsAt(noteTime, [sample]);\n        console.log(time, noteTime);\n        console.log(sampleIndex, this.state.drumObjs[sampleIndex]);\n      }\n    };\n\n    this.showDrums = () => {\n      // this is basically just a console.log of the drums currently available\n      this.midiSounds.player.loader.drumsKeys();\n    };\n\n    this.togglePlaying = (melody, sampleIndex, beatIndex) => {\n      // first arg is boolean to determine whether sample is a drumObj or instrumentObj\n      // second arg is position in drum/instrumentObj array (for accessing correct sample)\n      // third arg is position in array, to access correct beat\n      if (melody) {\n        this.state.instrumentObj[sampleIndex].isPlaying[beatIndex] = !this.state.instrumentObj[sampleIndex].isPlaying[beatIndex];\n        console.log(this.state.instrumentObj[sampleIndex].isPlaying);\n      } else {\n        this.state.drumObjs[sampleIndex].isPlaying[beatIndex] = !this.state.drumObjs[sampleIndex].isPlaying[beatIndex];\n        console.log(this.state.drumObjs[sampleIndex].isPlaying);\n      }\n    };\n\n    this.getDrumObjButtons = () => {\n      return this.state.drumObjs.map((drumObj, index) => {\n        let drumIndex = index;\n        let drum = drumObj;\n        return drumObj.isPlaying.map((beat, index) => {\n          return /*#__PURE__*/React.createElement(Button, {\n            key: drum.name + index,\n            id: drum.id,\n            sampleIndex: drumIndex,\n            beatIndex: index,\n            togglePlaying: this.togglePlaying,\n            sampleObj: drum,\n            sequenceThisNote: this.sequenceThisNote,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 24\n            }\n          });\n        });\n      });\n    };\n\n    this.getInstrumentObjButtons = () => {\n      return this.state.instrumentObj.map((instrumentObj, index) => {\n        let instrumentIndex = index;\n        let instrument = instrumentObj;\n        return instrumentObj.isPlaying.map((beat, index) => {\n          return /*#__PURE__*/React.createElement(Button, {\n            key: instrument.name + index,\n            id: instrument.id,\n            melody: instrument.melody,\n            sampleIndex: instrumentIndex,\n            beatIndex: index,\n            togglePlaying: this.togglePlaying,\n            sampleObj: instrument,\n            sequenceThisNote: this.sequenceThisNote,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 24\n            }\n          });\n        });\n      });\n    };\n  }\n\n  // TODO: TOMORROW\n  // Wrap playing functionality in a single function\n  // Something like\n  // playBeat = (sample, sampleIndex, beatIndex) =>{\n  // let time = this.midiSounds.contextTime()\n  //  for (let i=0; i<17; i++)\n  //  let bpm = this.state.bpm \n  //  let beat = 4 * 60 / bpm\n  //  let duration = beat/16\n  //  let noteTime = time + (duration + (duration * beatIndex))\n  //  if (isPlaying === true && isMelodic){\n  //  this.midiSounds.playChordAt(noteTime, sample, [60], 0.5)\n  //  } else if (isPlaying){\n  // this.midiSounds.playDrumsAt(noteTime, [sampleIndex])\n  // \n  // } else { \n  //  null\n  //  }\n  // if (i === 16){\n  // i = 0\n  // time = this.midiSounds.contextTime()\n  // }\n  // \n  // }\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"SampleContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(MIDISounds, {\n      ref: ref => this.midiSounds = ref,\n      appElementName: \"root\",\n      instruments: [458],\n      drums: this.state.drums,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }\n    }), this.getDrumObjButtons(), this.getInstrumentObjButtons());\n  }\n\n}\n\nexport default SampleContainer;","map":{"version":3,"sources":["/Users/ryan/Documents/GitHub/drumblr_frontend/src/SampleContainer.js"],"names":["React","MIDISounds","Button","SampleContainer","Component","state","bpm","drumObjs","id","name","isPlaying","instrumentObj","melody","sequenceThisNote","isMelodic","sample","sampleIndex","beatIndex","beat","duration","time","midiSounds","contextTime","noteTime","playChordAt","console","log","playDrumsAt","showDrums","player","loader","drumsKeys","togglePlaying","getDrumObjButtons","map","drumObj","index","drumIndex","drum","getInstrumentObjButtons","instrumentIndex","instrument","render","ref","drums"],"mappings":"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","sourcesContent":["import React from 'react';\nimport MIDISounds from 'midi-sounds-react';\nimport Button from '../src/Button'\n\nclass SampleContainer extends React.Component{\n    state = {\n        // just chose a default bpm to set state with\n        bpm: 120,\n        // I just hardcoded in some basic drums to start\n        drumObjs: [{\n            id: 3, \n            name: 'Bass Drum', \n            isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n        }, {\n            id: 17, \n            name: 'Snare Drum', \n            isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n        }, {\n            id: 22, \n            name: 'Hand Clap', \n            isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n        }, {\n            id: 26, \n            name: 'Snare 2', \n            isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n        },{\n            id: 32, \n            name: 'Low Tom 2', \n            isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n        },{\n            id: 35, \n            name: 'Closed Hi-hat', \n            isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n        },{\n            id: 40, \n            name: 'Low Tom 1', \n            isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n        },{\n            id: 45, \n            name: 'Pedal Hi-hat', \n            isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n        }, {\n            id: 52, \n            name: 'Mid Tom 2', \n            isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n        }, {\n            id: 56, \n            name: 'Open Hi-hat', \n            isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n        }, {\n            id: 61, \n            name: 'Mid Tom 1', \n            isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n        }, {\n            id: 70, \n            name: 'Crash Cymbal', \n            isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n        }, {\n            id: 95, \n            name: 'Tambourine', \n            isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n        }, {\n            id: 105, \n            name: 'Cowbell', \n            isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n        }\n    ], instrumentObj: [{\n            id: 458,\n            melody: true,\n            name: \"Violin\",\n            isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n        }]\n        \n    }\n\n    sequenceThisNote = (isMelodic, sample, sampleIndex, beatIndex) => {\n        let bpm = this.state.bpm \n        let beat = 4 * 60 / bpm\n        let duration = beat/16\n        let time = this.midiSounds.contextTime()\n        let noteTime = time + (duration + (duration * beatIndex))\n        if (isMelodic){\n            this.midiSounds.playChordAt(noteTime, sample, [60], 0.5)\n            console.log(time, noteTime)\n        } else if (!isMelodic) {\n            this.midiSounds.playDrumsAt(noteTime, [sample])\n            console.log(time, noteTime)\n            console.log(sampleIndex, this.state.drumObjs[sampleIndex])\n        }\n    }\n\n    showDrums = () => {\n        // this is basically just a console.log of the drums currently available\n        this.midiSounds.player.loader.drumsKeys()\n    }\n\n    togglePlaying = (melody, sampleIndex, beatIndex) => {\n        // first arg is boolean to determine whether sample is a drumObj or instrumentObj\n        // second arg is position in drum/instrumentObj array (for accessing correct sample)\n        // third arg is position in array, to access correct beat\n        if (melody){\n\n            this.state.instrumentObj[sampleIndex].isPlaying[beatIndex] = !this.state.instrumentObj[sampleIndex].isPlaying[beatIndex]\n            console.log(this.state.instrumentObj[sampleIndex].isPlaying)\n        } else {\n            this.state.drumObjs[sampleIndex].isPlaying[beatIndex] = !this.state.drumObjs[sampleIndex].isPlaying[beatIndex]\n            console.log(this.state.drumObjs[sampleIndex].isPlaying)\n        }\n    }\n\n    // playDrum = (drum_id) => {\n    //     this.midiSounds.playDrumsNow([drum_id])\n    //     console.log(this.midiSounds.contextTime())\n    // }\n\n    // playInstrument = (instrument_id) => {\n    //     // first arg is instrument, second arg is pitch, third arg is note duration\n    //     this.midiSounds.playChordNow(instrument_id, [60], 0.5);\n    // }\n\n    getDrumObjButtons = () => {\n        return this.state.drumObjs.map((drumObj, index) => {\n            let drumIndex = index\n            let drum = drumObj\n            return drumObj.isPlaying.map((beat, index) => {\n                return <Button key={drum.name + index} id={drum.id} sampleIndex={drumIndex} beatIndex={index} togglePlaying={this.togglePlaying} sampleObj={drum} sequenceThisNote={this.sequenceThisNote}/>\n            })\n        })\n    }\n\n    getInstrumentObjButtons = () => {\n        return this.state.instrumentObj.map((instrumentObj, index) => {\n            let instrumentIndex = index\n            let instrument = instrumentObj\n            return instrumentObj.isPlaying.map((beat, index) => {\n                return <Button key={instrument.name + index} id={instrument.id} melody={instrument.melody} sampleIndex={instrumentIndex} beatIndex={index} togglePlaying={this.togglePlaying} sampleObj={instrument} sequenceThisNote={this.sequenceThisNote}/>\n            })\n        })\n    }\n\n    // TODO: TOMORROW\n    // Wrap playing functionality in a single function\n    // Something like\n    // playBeat = (sample, sampleIndex, beatIndex) =>{\n    // let time = this.midiSounds.contextTime()\n    //  for (let i=0; i<17; i++)\n    //  let bpm = this.state.bpm \n    //  let beat = 4 * 60 / bpm\n    //  let duration = beat/16\n    //  let noteTime = time + (duration + (duration * beatIndex))\n    //  if (isPlaying === true && isMelodic){\n    //  this.midiSounds.playChordAt(noteTime, sample, [60], 0.5)\n    //  } else if (isPlaying){\n    // this.midiSounds.playDrumsAt(noteTime, [sampleIndex])\n    // \n    // } else { \n    //  null\n    //  }\n    // if (i === 16){\n    // i = 0\n    // time = this.midiSounds.contextTime()\n    // }\n    // \n    // }\n    \n    render(){\n        return (\n            <div className=\"SampleContainer\">\n                <MIDISounds \n                ref={(ref) => (this.midiSounds = ref)}\n                appElementName=\"root\" \n\t            instruments={[458]} \n                drums={this.state.drums}\n                />\n                {/* {this.showDrums} */}\n                {this.getDrumObjButtons()}\n                {this.getInstrumentObjButtons()}\n            </div>\n\n        )\n\n    }\n}\n\nexport default SampleContainer"]},"metadata":{},"sourceType":"module"}