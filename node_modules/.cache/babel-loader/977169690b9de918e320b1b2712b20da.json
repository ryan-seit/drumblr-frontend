{"ast":null,"code":"var _jsxFileName = \"/Users/ryan/Documents/GitHub/drumblr_frontend/src/App.js\";\nimport React from 'react';\nimport MIDISounds from 'midi-sounds-react';\nimport SampleContainer from './SampleContainer';\nimport HeaderContainer from './HeaderContainer';\nimport NavBar from './NavBar';\nimport './css/App.css';\nconst URL = 'http://localhost:3000';\nexport default class App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // just chose a default bpm to set state with\n      bpm: 120,\n      // name for saved beats\n      name: 'test',\n      // I just hardcoded in some basic drums to start\n      drumObjs: [{\n        id: 3,\n        name: 'Bass Drum',\n        isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n      }, {\n        id: 22,\n        name: 'Hand Clap',\n        isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n      }, {\n        id: 26,\n        name: 'Snare',\n        isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n      }, {\n        id: 35,\n        name: 'Closed Hi-hat',\n        isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]\n      }]\n    };\n\n    this.playSequence = () => {\n      // gets array of notes with value of true\n      let notesToPlay = [];\n      let drums = [...this.state.drumObjs];\n\n      for (let i = 0; i < drums.length; i++) drums[i].isPlaying.filter((note, index) => {\n        if (note) {\n          let drum = drums[i].id;\n          let noteObj = {\n            sample: drum,\n            beatIndex: index\n          };\n          notesToPlay.push(noteObj);\n          return notesToPlay;\n        }\n      });\n\n      let bpm = this.state.bpm;\n      let beat = 4 * 60 / bpm;\n      let duration = beat / 16;\n      let time = null;\n\n      if (this.midiSounds === null) {\n        time = 0;\n      } else {\n        time = this.midiSounds.contextTime();\n      } // let time = this.midiSounds.contextTime()\n\n\n      console.log(this.midiSounds);\n      notesToPlay.map(note => {\n        let noteTime = time + (duration + duration * note.beatIndex);\n        this.midiSounds.playDrumsAt(noteTime, [note.sample]);\n      }); // let noteTime = time + (duration + (duration * beatIndex))\n    };\n\n    this.sequenceThisNote = (sample, sampleIndex, beatIndex) => {\n      let bpm = this.state.bpm;\n      let beat = 4 * 60 / bpm;\n      let duration = beat / 16;\n      let time = this.midiSounds.contextTime();\n      let noteTime = time + (duration + duration * beatIndex); // this.midiSounds.playDrumsAt(noteTime, [sample])\n    };\n\n    this.togglePlaying = (sampleIndex, beatIndex) => {\n      let updatedDrumObjs = [...this.state.drumObjs];\n      let updatedIsPlaying = updatedDrumObjs[sampleIndex].isPlaying;\n      updatedIsPlaying[beatIndex] = !updatedIsPlaying[beatIndex];\n      updatedDrumObjs[sampleIndex].isPlaying = [...this.state.drumObjs[sampleIndex].isPlaying];\n      this.setState({\n        drumObjs: updatedDrumObjs\n      });\n    };\n\n    this.handleSave = () => {\n      fetch(URL + '/beats', {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(this.state)\n      }).then(response => response.json()).then(response => {\n        console.log(\"Saved to db\", response);\n      });\n    };\n\n    this.renderMIDISounds = () => {\n      return /*#__PURE__*/React.createElement(MIDISounds, {\n        ref: ref => this.midiSounds = ref,\n        appElementName: \"root\",\n        instruments: [3, 458],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 7\n        }\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"drumblr\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(HeaderContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(NavBar, {\n      playSequence: this.playSequence,\n      handleSave: this.handleSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(SampleContainer, {\n      app: this.state,\n      togglePlaying: this.togglePlaying,\n      sequenceThisNote: this.sequenceThisNote,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"FooterContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }\n    })), this.renderMIDISounds());\n  }\n\n}","map":{"version":3,"sources":["/Users/ryan/Documents/GitHub/drumblr_frontend/src/App.js"],"names":["React","MIDISounds","SampleContainer","HeaderContainer","NavBar","URL","App","Component","state","bpm","name","drumObjs","id","isPlaying","playSequence","notesToPlay","drums","i","length","filter","note","index","drum","noteObj","sample","beatIndex","push","beat","duration","time","midiSounds","contextTime","console","log","map","noteTime","playDrumsAt","sequenceThisNote","sampleIndex","togglePlaying","updatedDrumObjs","updatedIsPlaying","setState","handleSave","fetch","method","headers","body","JSON","stringify","then","response","json","renderMIDISounds","ref","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport MIDISounds from 'midi-sounds-react';\nimport SampleContainer from './SampleContainer';\nimport HeaderContainer from './HeaderContainer';\nimport NavBar from './NavBar';\nimport './css/App.css';\nconst URL = 'http://localhost:3000';\n\nexport default class App extends React.Component {\n\n  state = {\n    // just chose a default bpm to set state with\n    bpm: 120,\n    // name for saved beats\n    name: 'test',\n    // I just hardcoded in some basic drums to start\n    drumObjs: [{\n        id: 3, \n        name: 'Bass Drum', \n        isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n      }, {\n        id: 22, \n        name: 'Hand Clap', \n        isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n      }, {\n        id: 26, \n        name: 'Snare', \n        isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n      },{\n      id: 35, \n      name: 'Closed Hi-hat', \n      isPlaying: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n    }],\n  }\n\n\n  playSequence = () => {\n\n    // gets array of notes with value of true\n    let notesToPlay = []\n    let drums = [...this.state.drumObjs]\n    for (let i=0; i<drums.length; i++)\n      drums[i].isPlaying.filter((note, index )=> {\n        if (note){\n          let drum = drums[i].id\n          let noteObj = {sample: drum, beatIndex: index}          \n          notesToPlay.push(noteObj)\n          return notesToPlay\n        }\n      })\n    \n    let bpm = this.state.bpm \n    let beat = 4 * 60 / bpm\n    let duration = beat/16\n    let time = null\n    if (this.midiSounds === null){\n      time = 0\n    } else{\n      time = this.midiSounds.contextTime()\n    }\n    // let time = this.midiSounds.contextTime()\n    console.log(this.midiSounds)\n    notesToPlay.map(note => {\n      let noteTime = time + (duration + (duration * note.beatIndex))\n      this.midiSounds.playDrumsAt(noteTime, [note.sample])\n      \n    })\n    // let noteTime = time + (duration + (duration * beatIndex))\n  }\n\n  sequenceThisNote = (sample, sampleIndex, beatIndex) => {\n    let bpm = this.state.bpm \n    let beat = 4 * 60 / bpm\n    let duration = beat/16\n    let time = this.midiSounds.contextTime()\n    let noteTime = time + (duration + (duration * beatIndex))\n      \n    // this.midiSounds.playDrumsAt(noteTime, [sample])\n}\n\n  togglePlaying = (sampleIndex, beatIndex) => {\n    let updatedDrumObjs = [...this.state.drumObjs]\n    let updatedIsPlaying = updatedDrumObjs[sampleIndex].isPlaying\n    updatedIsPlaying[beatIndex] = !updatedIsPlaying[beatIndex]\n    updatedDrumObjs[sampleIndex].isPlaying = [...this.state.drumObjs[sampleIndex].isPlaying]\n    this.setState({\n      drumObjs: updatedDrumObjs\n    })\n  }\n\n  // persist current sequence to database\n  handleSave = () => {\n    fetch(URL + '/beats', {\n      method: \"POST\",\n      headers: {\"Content-Type\": \"application/json\"},\n      body: JSON.stringify(this.state)\n    })\n    .then(response => response.json())\n    .then(response => {\n      console.log(\"Saved to db\", response);\n    })\n  }\n\n  // render MIDISounds logo in order for samples to play when sequence is triggered\n  renderMIDISounds = () => {\n    return (\n      <MIDISounds \n      ref={(ref) => (this.midiSounds = ref)}\n      appElementName=\"root\" \n      instruments={[3, 458]}\n      />\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"drumblr\">\n          <HeaderContainer />\n          <NavBar playSequence={this.playSequence} handleSave={this.handleSave} />\n          <SampleContainer app={this.state} togglePlaying={this.togglePlaying} sequenceThisNote={this.sequenceThisNote}/>\n          <div className=\"FooterContainer\"></div>\n        </div>\n        {this.renderMIDISounds()}\n      </div>\n  );\n}\n}\n"]},"metadata":{},"sourceType":"module"}